// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	config "github.com/MaximMNsk/go-secure-storage/server/config"

	mock "github.com/stretchr/testify/mock"
)

// PGStorage is an autogenerated mock type for the PGStorage type
type PGStorage struct {
	mock.Mock
}

// Destroy provides a mock function with given fields:
func (_m *PGStorage) Destroy() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Destroy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisableUserKeys provides a mock function with given fields: ctx, userID
func (_m *PGStorage) DisableUserKeys(ctx context.Context, userID int) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DisableUserKeys")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByLogin provides a mock function with given fields: ctx, login
func (_m *PGStorage) GetUserByLogin(ctx context.Context, login string) (int, string, string, error) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByLogin")
	}

	var r0 int
	var r1 string
	var r2 string
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, string, string, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, login)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) string); ok {
		r2 = rf(ctx, login)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(context.Context, string) error); ok {
		r3 = rf(ctx, login)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetUserData provides a mock function with given fields: ctx, userID, dataType
func (_m *PGStorage) GetUserData(ctx context.Context, userID int, dataType string) ([][]byte, error) {
	ret := _m.Called(ctx, userID, dataType)

	if len(ret) == 0 {
		panic("no return value specified for GetUserData")
	}

	var r0 [][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) ([][]byte, error)); ok {
		return rf(ctx, userID, dataType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) [][]byte); ok {
		r0 = rf(ctx, userID, dataType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, userID, dataType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserKeyByLogin provides a mock function with given fields: ctx, login
func (_m *PGStorage) GetUserKeyByLogin(ctx context.Context, login string) ([]byte, error) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for GetUserKeyByLogin")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: ctx, _a1
func (_m *PGStorage) Init(ctx context.Context, _a1 config.Config) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, config.Config) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ping provides a mock function with given fields: ctx
func (_m *PGStorage) Ping(ctx context.Context) bool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SaveUser provides a mock function with given fields: ctx, name, secondName, login, pwdHash, userKey
func (_m *PGStorage) SaveUser(ctx context.Context, name string, secondName string, login string, pwdHash string, userKey []byte) (int, bool, error) {
	ret := _m.Called(ctx, name, secondName, login, pwdHash, userKey)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 int
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []byte) (int, bool, error)); ok {
		return rf(ctx, name, secondName, login, pwdHash, userKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []byte) int); ok {
		r0 = rf(ctx, name, secondName, login, pwdHash, userKey)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, []byte) bool); ok {
		r1 = rf(ctx, name, secondName, login, pwdHash, userKey)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, string, []byte) error); ok {
		r2 = rf(ctx, name, secondName, login, pwdHash, userKey)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SaveUserData provides a mock function with given fields: ctx, userID, dataType, data
func (_m *PGStorage) SaveUserData(ctx context.Context, userID int, dataType string, data []byte) error {
	ret := _m.Called(ctx, userID, dataType, data)

	if len(ret) == 0 {
		panic("no return value specified for SaveUserData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, []byte) error); ok {
		r0 = rf(ctx, userID, dataType, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetUserKey provides a mock function with given fields: ctx, userID, key
func (_m *PGStorage) SetUserKey(ctx context.Context, userID int, key []byte) error {
	ret := _m.Called(ctx, userID, key)

	if len(ret) == 0 {
		panic("no return value specified for SetUserKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []byte) error); ok {
		r0 = rf(ctx, userID, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPGStorage creates a new instance of PGStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPGStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *PGStorage {
	mock := &PGStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
