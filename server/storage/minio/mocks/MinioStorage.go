// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	config "github.com/MaximMNsk/go-secure-storage/server/config"

	mock "github.com/stretchr/testify/mock"
)

// MinioStorage is an autogenerated mock type for the MinioStorage type
type MinioStorage struct {
	mock.Mock
}

// Destroy provides a mock function with given fields:
func (_m *MinioStorage) Destroy() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Destroy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetObject provides a mock function with given fields: ctx, userID, name
func (_m *MinioStorage) GetObject(ctx context.Context, userID string, name string) ([]byte, error) {
	ret := _m.Called(ctx, userID, name)

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]byte, error)); ok {
		return rf(ctx, userID, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, userID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: _a0, _a1
func (_m *MinioStorage) Init(_a0 context.Context, _a1 config.Config) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, config.Config) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListObjects provides a mock function with given fields: ctx, userID
func (_m *MinioStorage) ListObjects(ctx context.Context, userID string) ([]string, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListObjects")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: _a0
func (_m *MinioStorage) Ping(_a0 context.Context) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PutObject provides a mock function with given fields: ctx, userID, objectName, object
func (_m *MinioStorage) PutObject(ctx context.Context, userID string, objectName string, object []byte) error {
	ret := _m.Called(ctx, userID, objectName, object)

	if len(ret) == 0 {
		panic("no return value specified for PutObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte) error); ok {
		r0 = rf(ctx, userID, objectName, object)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMinioStorage creates a new instance of MinioStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMinioStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MinioStorage {
	mock := &MinioStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
