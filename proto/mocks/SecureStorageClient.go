// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/MaximMNsk/go-secure-storage/proto"
)

// SecureStorageClient is an autogenerated mock type for the SecureStorageClient type
type SecureStorageClient struct {
	mock.Mock
}

// AuthUser provides a mock function with given fields: ctx, in, opts
func (_m *SecureStorageClient) AuthUser(ctx context.Context, in *proto.AuthUserRequest, opts ...grpc.CallOption) (*proto.AuthUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AuthUser")
	}

	var r0 *proto.AuthUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.AuthUserRequest, ...grpc.CallOption) (*proto.AuthUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.AuthUserRequest, ...grpc.CallOption) *proto.AuthUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AuthUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.AuthUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckService provides a mock function with given fields: ctx, in, opts
func (_m *SecureStorageClient) CheckService(ctx context.Context, in *proto.CheckServiceRequest, opts ...grpc.CallOption) (*proto.CheckServiceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CheckService")
	}

	var r0 *proto.CheckServiceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CheckServiceRequest, ...grpc.CallOption) (*proto.CheckServiceResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CheckServiceRequest, ...grpc.CallOption) *proto.CheckServiceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CheckServiceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.CheckServiceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserBinary provides a mock function with given fields: ctx, in, opts
func (_m *SecureStorageClient) GetUserBinary(ctx context.Context, in *proto.GetUserBinaryRequest, opts ...grpc.CallOption) (*proto.GetUserBinaryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserBinary")
	}

	var r0 *proto.GetUserBinaryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetUserBinaryRequest, ...grpc.CallOption) (*proto.GetUserBinaryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetUserBinaryRequest, ...grpc.CallOption) *proto.GetUserBinaryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetUserBinaryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetUserBinaryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserBinaryList provides a mock function with given fields: ctx, in, opts
func (_m *SecureStorageClient) GetUserBinaryList(ctx context.Context, in *proto.GetUserBinaryListRequest, opts ...grpc.CallOption) (*proto.GetUserBinaryListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserBinaryList")
	}

	var r0 *proto.GetUserBinaryListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetUserBinaryListRequest, ...grpc.CallOption) (*proto.GetUserBinaryListResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetUserBinaryListRequest, ...grpc.CallOption) *proto.GetUserBinaryListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetUserBinaryListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetUserBinaryListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserCards provides a mock function with given fields: ctx, in, opts
func (_m *SecureStorageClient) GetUserCards(ctx context.Context, in *proto.GetUserCardsRequest, opts ...grpc.CallOption) (*proto.GetUserCardsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserCards")
	}

	var r0 *proto.GetUserCardsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetUserCardsRequest, ...grpc.CallOption) (*proto.GetUserCardsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetUserCardsRequest, ...grpc.CallOption) *proto.GetUserCardsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetUserCardsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetUserCardsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserCredentials provides a mock function with given fields: ctx, in, opts
func (_m *SecureStorageClient) GetUserCredentials(ctx context.Context, in *proto.GetUserCredentialsRequest, opts ...grpc.CallOption) (*proto.GetUserCredentialsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserCredentials")
	}

	var r0 *proto.GetUserCredentialsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetUserCredentialsRequest, ...grpc.CallOption) (*proto.GetUserCredentialsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetUserCredentialsRequest, ...grpc.CallOption) *proto.GetUserCredentialsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetUserCredentialsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetUserCredentialsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPlains provides a mock function with given fields: ctx, in, opts
func (_m *SecureStorageClient) GetUserPlains(ctx context.Context, in *proto.GetUserPlainsRequest, opts ...grpc.CallOption) (*proto.GetUserPlainResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPlains")
	}

	var r0 *proto.GetUserPlainResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetUserPlainsRequest, ...grpc.CallOption) (*proto.GetUserPlainResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetUserPlainsRequest, ...grpc.CallOption) *proto.GetUserPlainResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetUserPlainResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetUserPlainsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, in, opts
func (_m *SecureStorageClient) RegisterUser(ctx context.Context, in *proto.RegisterUserRequest, opts ...grpc.CallOption) (*proto.RegisterUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 *proto.RegisterUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.RegisterUserRequest, ...grpc.CallOption) (*proto.RegisterUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.RegisterUserRequest, ...grpc.CallOption) *proto.RegisterUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.RegisterUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.RegisterUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveUserBinary provides a mock function with given fields: ctx, in, opts
func (_m *SecureStorageClient) SaveUserBinary(ctx context.Context, in *proto.SaveUserBinaryRequest, opts ...grpc.CallOption) (*proto.SaveUserBinaryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SaveUserBinary")
	}

	var r0 *proto.SaveUserBinaryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SaveUserBinaryRequest, ...grpc.CallOption) (*proto.SaveUserBinaryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SaveUserBinaryRequest, ...grpc.CallOption) *proto.SaveUserBinaryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SaveUserBinaryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.SaveUserBinaryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveUserCard provides a mock function with given fields: ctx, in, opts
func (_m *SecureStorageClient) SaveUserCard(ctx context.Context, in *proto.SaveUserCardRequest, opts ...grpc.CallOption) (*proto.SaveUserCardResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SaveUserCard")
	}

	var r0 *proto.SaveUserCardResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SaveUserCardRequest, ...grpc.CallOption) (*proto.SaveUserCardResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SaveUserCardRequest, ...grpc.CallOption) *proto.SaveUserCardResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SaveUserCardResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.SaveUserCardRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveUserCredentials provides a mock function with given fields: ctx, in, opts
func (_m *SecureStorageClient) SaveUserCredentials(ctx context.Context, in *proto.SaveUserCredentialsRequest, opts ...grpc.CallOption) (*proto.SaveUserCredentialsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SaveUserCredentials")
	}

	var r0 *proto.SaveUserCredentialsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SaveUserCredentialsRequest, ...grpc.CallOption) (*proto.SaveUserCredentialsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SaveUserCredentialsRequest, ...grpc.CallOption) *proto.SaveUserCredentialsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SaveUserCredentialsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.SaveUserCredentialsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveUserPlain provides a mock function with given fields: ctx, in, opts
func (_m *SecureStorageClient) SaveUserPlain(ctx context.Context, in *proto.SaveUserPlainRequest, opts ...grpc.CallOption) (*proto.SaveUserPlainResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SaveUserPlain")
	}

	var r0 *proto.SaveUserPlainResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SaveUserPlainRequest, ...grpc.CallOption) (*proto.SaveUserPlainResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SaveUserPlainRequest, ...grpc.CallOption) *proto.SaveUserPlainResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SaveUserPlainResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.SaveUserPlainRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSecureStorageClient creates a new instance of SecureStorageClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecureStorageClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecureStorageClient {
	mock := &SecureStorageClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
