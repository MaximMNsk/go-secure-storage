// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SecureStorageClient is the client API for SecureStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecureStorageClient interface {
	CheckService(ctx context.Context, in *CheckServiceRequest, opts ...grpc.CallOption) (*CheckServiceResponse, error)
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*AuthUserResponse, error)
}

type secureStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewSecureStorageClient(cc grpc.ClientConnInterface) SecureStorageClient {
	return &secureStorageClient{cc}
}

func (c *secureStorageClient) CheckService(ctx context.Context, in *CheckServiceRequest, opts ...grpc.CallOption) (*CheckServiceResponse, error) {
	out := new(CheckServiceResponse)
	err := c.cc.Invoke(ctx, "/secure_storage.SecureStorage/CheckService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureStorageClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, "/secure_storage.SecureStorage/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureStorageClient) AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*AuthUserResponse, error) {
	out := new(AuthUserResponse)
	err := c.cc.Invoke(ctx, "/secure_storage.SecureStorage/AuthUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecureStorageServer is the server API for SecureStorage service.
// All implementations must embed UnimplementedSecureStorageServer
// for forward compatibility
type SecureStorageServer interface {
	CheckService(context.Context, *CheckServiceRequest) (*CheckServiceResponse, error)
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	AuthUser(context.Context, *AuthUserRequest) (*AuthUserResponse, error)
	mustEmbedUnimplementedSecureStorageServer()
}

// UnimplementedSecureStorageServer must be embedded to have forward compatible implementations.
type UnimplementedSecureStorageServer struct {
}

func (UnimplementedSecureStorageServer) CheckService(context.Context, *CheckServiceRequest) (*CheckServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckService not implemented")
}
func (UnimplementedSecureStorageServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedSecureStorageServer) AuthUser(context.Context, *AuthUserRequest) (*AuthUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthUser not implemented")
}
func (UnimplementedSecureStorageServer) mustEmbedUnimplementedSecureStorageServer() {}

// UnsafeSecureStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecureStorageServer will
// result in compilation errors.
type UnsafeSecureStorageServer interface {
	mustEmbedUnimplementedSecureStorageServer()
}

func RegisterSecureStorageServer(s grpc.ServiceRegistrar, srv SecureStorageServer) {
	s.RegisterService(&SecureStorage_ServiceDesc, srv)
}

func _SecureStorage_CheckService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureStorageServer).CheckService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secure_storage.SecureStorage/CheckService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureStorageServer).CheckService(ctx, req.(*CheckServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureStorage_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureStorageServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secure_storage.SecureStorage/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureStorageServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureStorage_AuthUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureStorageServer).AuthUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secure_storage.SecureStorage/AuthUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureStorageServer).AuthUser(ctx, req.(*AuthUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecureStorage_ServiceDesc is the grpc.ServiceDesc for SecureStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecureStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "secure_storage.SecureStorage",
	HandlerType: (*SecureStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckService",
			Handler:    _SecureStorage_CheckService_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _SecureStorage_RegisterUser_Handler,
		},
		{
			MethodName: "AuthUser",
			Handler:    _SecureStorage_AuthUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/secure_storage.proto",
}
